#!/bin/bash

s_help() {
  local S_SA="$(s_print_system_actions)"
cat << HELPFILE
Usage: 
  ws-session <option>
        You can only use one option at a time.

Options:
  -a|all <$S_SA>
        Close all sessions and then run a system_action.
        You can create new system_actions in your rc file.
  -c|close [sessionname]
        Close current session if no sessionname is supplied.
        Or close the session named sessionname.
  -h|help
        Print this help.
  -l|list
        List all saved sessions in '\$S_DATA_FOLDER'.
  -m|menu
        Start a session from a menu.
        You have to set '\$S_MENU' in the rc file.
  -o|open <sessionname>
        Start the session with name sessionname.
  -p|path
        Prints the temporary path for dotfiles etc.
  -r|restore <sessionname>
        Restore a session to a previous state.
        You can do it up to '\$S_NUMBER_OF_BACKUPS' times.

Debug Options:
  debug <function>
        Executes the argument after sourcing everything.
        WARNING: don't try ws-session debug rm -rf *
        EXAMPLE: ws-session debug s_list_app_seltag
  print <variable> [variable]
        Prints the content of the variables supplied.
        EXAMPLE: ws-session print S_LIB_FOLDER S_SEL_TAG
        

Please report bugs at http://github.com/ctx/ws-session/issues.
HELPFILE
}

s_print_system_actions() {
  typeset -F | grep s_system_action_ | cut -f4 -d'_' | tr '\n' '|' | sed 's/|$//'
}

S_LIB_FOLDER=${S_LIB_FOLDER:-/usr/lib/ws-session}
source $S_LIB_FOLDER/core/source.sh

case $1 in
  -l|list)
    s_source_lib data
    s_list_sessions
    ;;
  -p|path)
    s_source_lib wm stopwm
    echo "$S_TEMP_FOLDER/$S_SEL_TAG"
    ;;
  -m|menu)
    if [[ -x "$(which ${S_MENU%% *} 2>/dev/null)" ]] ; then
      s_source_lib wm stopwm data

      s="$( (s_list_open_tags;s_list_sessions) \
        | grep -v ^$ \
        | sort -u \
        | eval "${S_MENU} ${S_MENU_PROMPT_SWITCH}'start a session:'")"

      if s_list_open_tags | grep -q "$s" ; then
        s_newtag "$s"
      elif [[ -n $s ]] ; then
          s_source_lib session allapp
          s_opensession "$s" & disown
      else
        s_error "No session selected" \
          "You stopped the menu without choosing a session"
      fi
    else
      s_error "Cannot show menu: '$S_MENU'" "Set it in your rc file" 
    fi
    ;;
  -o|open)
    shift
    {
      name="$@"
      s_source_lib wm stopwm data session allapp
      s_opensession "$name"
    } & disown
    ;;
  -c|close)
    shift
      name="$@"
      s_source_lib wm stopwm
      if s_list_open_tags | grep -q "$name" ; then
        if [[ $@ ]] ; then S_DEFAULT_TAG=$(s_seltag) ; fi
        s_source_lib data session allapp
        s_closesession "$name" & disown -a
      else
        s_error "No open session named '$name'" \
          "I can only close open sessions"
      fi
    ;;
  -a|all)
    S_ACTION="$2"
    s_source_lib wm stopwm data session allapp
    if ! type s_system_action_$S_ACTION 2>/dev/null \
         | grep -q 'is a function' ; then
      s_fatal "No such action '$S_ACTION'" \
        "Known actions are: $(s_print_system_actions)
       Change them in the rc file"
    fi
    {
      while read -r name ; do
        s_closesession "$name"
      done < <(s_list_open_tags \
                 | grep -v "$S_DEFAULT_TAG"
                 echo "$S_DEFAULT_TAG")
      sleep $S_RUN_ACTION_SLEEP
      s_system_action_$S_ACTION
    } & disown
    ;;
  -r|restore)
    shift
    name="$@"
    s_source_lib data
    if s_list_sessions | grep -q -e "^$name$" ; then
      s_restore_data "$name"
    else
      s_error "no session with name '$name'" \
        "list your sessions with ws-session -l"
    fi
    ;;
  -h|help)
    s_help
    ;;
  debug)
    shift
    s_source_lib wm data session allapp
    $@
    ;;
  print)
    shift
    s_source_lib wm data session allapp
    for v in $@ ; do 
      eval echo "$v \;= \${$v[@]}"
    done | column -t -s";"
    ;;
  *)
    s_error "No such option '$1'" help
    ;;
esac

# vim: ft=sh ts=2 et sw=2:
