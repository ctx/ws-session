#!/bin/bash

S_LIB_FOLDER=${S_LIB_FOLDER:-/usr/lib/ws-session}
source $S_LIB_FOLDER/lib/source.sh

help() {
cat << HELPFILE
Usage: 
  ws-session option [sessionname]
        You can only use one argument at a time.
        Some arguments need a session name.
        Session names should not contain '=' or ','.

Options:
  -c|close [sessionname]
        Without name: close active session.
        If no session with name is open, then close active session to name.
        If a session with name is open, then close it.
  -h|help
        Print this help.
  -l|list
        List all saved sessions in '\$S_DATA_FOLDER'.
  -m|menu
        Start a session from a menu.
        You have to set '\$S_MENU' in the rc file.
  -o|open sessionname
        Start the session with name name.
  -p|path:
        Prints the temporary path for dotfiles etc.
  -r|restore sessionname
        Restore a session to a previous state.
        You can do it up to '\$S_NUMBER_OF_BACKUPS' times.

Please report bugs at http://github.com/ctx/ws-session/issues.
HELPFILE
}

case $1 in
  -l|list)
    s_source_lib data
    s_list_sessions
    ;;
  -p|path)
    s_source_lib wm stopwm
    echo "$S_TEMP_FOLDER/$S_SEL_TAG/"
    ;;
  -m|menu)
    if [[ -n "$S_MENU" ]] ; then
      s_source_lib wm stopwm data

      s="$( (s_list_open_tags;s_list_sessions) \
        | grep -v ^$ \
        | sort \
        | uniq -u \
        | $S_MENU -p "start a session:")"

      if [[ -n $s ]] ; then
        {
          s_source_lib session allapp
          s_opensession "$s"
        } & disown
      else
        echo Error: no session selected.
      fi
    else
      echo Error: cannot show menu.
    fi
    ;;
  -o|open)
    shift
    {
      name="$@"
      s_source_lib wm stopwm data session allapp
      s_opensession "$name"
    } & disown
    ;;
  -c|close)
    shift
    {
      name="$@"
      s_source_lib wm stopwm data session allapp
      s_closesession "$name"
    } & disown
    ;;
  -r|restore)
    shift
    name="$@"
    s_source_lib wm stopwm data
    if [[ -n "$(s_list_sessions | grep -e "^$name$")" ]] ; then
      s_restore_data "$name"
    else
      echo "Error: no session with name '$name'"
    fi
    ;;
  -h|help)
    help
    ;;
  *)
    echo "Error: no such argument '$1'"
    echo
    help
    ;;
esac

# vim: ft=sh ts=2 et sw=2:
