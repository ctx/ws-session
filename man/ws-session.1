.TH WS-SESSION 1 "April 12, 2015" "ws-session VERSION"
.OS Linux
.SH NAME
ws-session - a session manager for virtual desktops
.SH SYNOPSIS
.B ws-session
.RB [\| \-a \||\| \-h \||\| \-l \||\| \-m \||\| \-p \||\| \-s \||\| \-v\| ]
.br
.B ws-session
.RB [\| \-c \||\| \-n \||\| \-o \ [ \-f \|]| \-r ]
.IR session-name
.br
.B ws-session
.RB \| \-a
.IR system-action \|
.SH DESCRIPTION
.B ws-session
creates one session for every 
.IR virtual-desktop ,
.I workspace
or
.IR tag \.

You can start and stop sessions independent of each other.

You can configure what should be part of your sessions: browser history/tabs,
bash history, terminals with cwd, editors and open files, open pdfs, ncurses
applications like mutt, htop, ssh (tmux attach) and everything else you can
think of and write a wrapper.
.SH OPTIONS
.TP
\fB\-a\fP, \fBall \fP[\fIsystem-action\fP]
.br
Close all sessions and then run a 
.IR system-action .
.br
You can create new 
.I system-actions
in your rc file.
.br
List all
.I system-actions
if you don't specify one.
.TP
\fB\-c\fP, \fBclose\fP [\fIsession-name\fP]
.br
Close current session if there is no session-name.
.br
Or close the session named 
.IR session-name \.
.TP
\fB\-h\fP, \fBhelp
.br
Print help.
.TP
\fB\-l\fP, \fBlist
.br
List all saved sessions.
.TP
\fB\-m\fP, \fBmenu
.br
Start a session from a menu.
You have to set 
.I $S_MENU
in the rc file.
.TP
\fB\-n\fP, \fBnew \fIsession-name
.br
Close current session and save it under the new name
.IR session-name .
.TP
\fB\-o\fP, \fBopen\fP [\fB-f\fP] \fIsession-name
.br
Start the session with name 
.IR session-name .
.br
Use
.B -f
to open a session when there is already a tag with the same name.
.TP
\fB\-p\fP, \fBpath
.br
Print the path to the temporary directory of the current session.
.TP
\fB\-r\fP, \fBrestore \fIsession-name
.br
Restore the session named 
.I session-name
to a previous state.
.br
You can do it up to 
.I $S_NUMBER_OF_BACKUPS
times.
.TP
\fB\-s\fP, \fBstarted
.br
List all currently running sessions.
.TP
\fB\-v\fP, \fBversion
Print version.
.SH DEBUG OPTIONS
.TP
.BI debug \ function
Executes the specified
.I function
or any command, after sourcing
everything.
.br
WARNING: don't try
.B ws-session debug rm -rf *
.br
EXAMPLE:
.B ws-session debug s_list_app_seltag
.TP
\fBprint \fP[\fIvariable \fP...]
Prints the content of the variables supplied.
.br
EXAMPLE:
.B ws-session print S_LIB_HOME S_SEL_TAG
.SH ENVIRONMENT
Some of the
.BR GLOBAL\ VARIABLES \ (see \ ws-session (7))
can be set as environment variables. This is mostly useful for testing and
debugging. But you could also use different settings for different window
manager, by setting some of this environment variables in your .xinitrc.
Of course you can set them in your config file to a static value.
.SS S_CONFIG_HOME
If you don't like
.IR XDG \ and \ ~/.ws-session.rc
or temporary want to use another configuration you can
use this variable to point to the corresponding configuration files.
.SS S_DEBUG
Most output from shell commands used in the code is normally suppressed and
replaced by meaningful messages. If you encounter bugs, you might want to see
why those commands fail and therefore you set
.B S_DEBUG=1
in your environment. Or just use one of the
.B  DEBUG\ OPTIONS
or
.I tests
(see
.BR ws-session (7))
to run the failing code as
.B S_DEBUG
will be activated when using one of them.
.SS S_DEFAULT_TAG
If you close a session your window manager changes to this workspace.
The example configuration will respect
.B S_DEFAULT_TAG
from your environment.
.SS S_LIB_HOME
If you do not install
.B ws-session
into your os'
.I /usr/lib
directory, you have to set this variable. To temporarily use
experimental code, run this command in your coding directory:
.B S_LIB_HOME=$(pwd) bin/ws-session
.SS S_LOGFILE
Use this variable to send output to a log file. When this variable is set, -xv
is enabled and sent to the log file. This can be useful when you want to debug your
.I ws-session.rc
file. Use it like this:

.B S_LOGFILE=ws-session.log ws-session -o examplesession

.SH FILES

.HP 3
.SS /usr/bin/ws-app

Since most applications have no session support, and those who have need to know
when to start and stop a session, we have to change the way they start.  Most,
but not all of the supported applications in the
.I app
directory
(see
.SM
.B "/usr/lib/ws-session/app/*"
below) have to
be started by a symlink or copy of
.BR ws-app .
Create a copy if you need to adjust
.B ws-app
for whatever reason, symlinks will get updated automatically.

For example you could add
.I $XDG_CONFIG_HOME/ws-session/bin
to your
.I $PATH
and use such commands to create the symlinks:
.nf

.B ln -s /usr/bin/ws-app $XDG_CONFIG_HOME/ws-session/bin/vim

.fi
As of now you need symlinks for
.BR dwb ,
.BR luakit ,
.BR qutebrowser ,
.B mupdf
and 
.B vim
if you want them be part of your sessions.
.P
In the best case there is no need for the function
.I s_app_start
in the
.I app
file
(see
.BR ws-session (7)).
Today
.B urxvt
and
.B zathura
do not come with a
.I s_app_start
function. Zathura is happy without any configuration adjustments. However, you
have to adjust the settings for your shell, in order to separate for example
history and dirstack by session:
.nf

stmpdir="$(ws-session -p)"
stmpdir="${stmpdir-$HOME/.}
export HISTFILE="${stmpdir}zsh_history"
export DIRSTACKFILE="${stmpdir}zdirs"
unset stmpdir
.fi
.HP 3

.SS /usr/bin/ws-cmd

This is a wrapper for shell commands or curses interfaces, which will be
restarted in a new terminal when opening a session. Be sure that you cannot
lose your work when the terminal window gets closed by a session close command.

Example usage with longer arguments:
.nf

ws-cmd ncmpcpp -h 10.0.0.5
ws-cmd ssh -l user 10.0.0.5 "tmux attach"

.fi
You can also create your own aliases in you shell rc:
.nf

if ws-session -p > /dev/null ; then
  setopt complete aliases
  alias htop='ws-cmd htop'
  alias mutt='ws-cmd mutt'
  alias man='ws-cmd man'
fi
.fi
.HP 3

.SS /etc/xdg/ws-session/ws-session.rc

The default configuration file; all possible configuration items are described
in this file. Use it as template for your own configuration. User configuration
files are searched at the following places in this order:
.HP 3
1.\ \fI$S_CONFIG_HOME/ws-session/ws-session.rc\fP if you
have set the environment variable \fI$S_CONFIG_HOME\fP
in your calling shell.
.HP 3
2.\ \fI$XDG_CONFIG_HOME/ws-session/ws-session.rc\fP
.HP 3
3.\ \fI~/.ws-session.rc\fP

.SS /usr/lib/ws-session/app/*

This is the 
.I app
directory, here are the default application files with all the start and stop
code. If you don't like how an application restores its session, you can create
your own version. Copy the default application file to your
.I app
directory and adjust it to your liking. Of course
this is also the place to create support for other applications you want to be
able to restore. All commands 
.RB ( ws-session ,\  ws-app \ and \ ws-cmd )
search for
.I app
files in the following order:
.HP 3
1.\ \fI$S_CONFIG_HOME/app\fP if you set \fI$S_CONFIG_HOME\fP in your rc
file or the calling shell
.HP 3
2.\ \fI$XDG_CONFIG_HOME/ws-session/app\fP
.HP 3
3.\ \fI~/.ws-session/app\fP
.HP 3
4.\ \fI$S_LIB_HOME/app\fP

.SS /usr/lib/ws-session/wm/*

Here are the default window manager files, it's the
.I wm
directory. It works exactly the same way like the
.I app
directory (see
.B /usr/lib/ws-session/app/*
above). This directories will get scanned for
.I wm
files:
.HP 3
1.\ \fI$S_CONFIG_HOME/wm\fP if you set \fI$S_CONFIG_HOME\fP in your rc
file or the calling shell
.HP 3
2.\ \fI$XDG_CONFIG_HOME/ws-session/wm\fP
.HP 3
3.\ \fI~/.ws-session/wm\fP
.HP 3
4.\ \fI$S_LIB_HOME/wm\fP

.SH SEE ALSO
.I ws-session(7)
.SH CONTRIBUTE
.mso www.tmac
Please send bug reports/fixes, wm and app files or any other comment to
.URL http://github.com/ctx/ws-session/issues
.SH COPYRIGHT
Copyright Â© 2010 - 2015
.MTO ctroxler@gmail.com "Ciril Troxler"

License GPLv3+: GNU GPL version 3 or later 
.URL http://gnu.org/licenses/gpl.html
 
This is free software; you are free to change and redistribute it.
