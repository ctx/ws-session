#!/bin/bash

VERSION=

s_help() {
echo "Synopsis:
  ws-session [-a|-h|-l|-m|-p|-s|-v]
  ws-session [-c|-o [-f]|-r] session-name
  ws-session -a system-action

Options:
  -a|all system-action
        Close all sessions and then run a 'system-action'.
        You can create new system-actions in your rc file.
        Available system-actions: $(s_print_system_actions).
        List all system-actions if you don't specify one.
  -c|close [session-name]
        Close current session if there is no session-name.
        Or close the session named 'session-name'.
  -h|help
        Print the help.
  -l|list
        List all saved sessions in '\$S_DATA_HOME'.
  -m|menu
        Start a session from a menu.
        You have to set '\$S_MENU' in the rc file.
  -n|new session-name
        Close current session and save it under the new name
        'session-name'.
  -o|open [-f] session-name
        Start the session with name 'session-name'.
        Use -f to open sessions on an already open (empty) tag
        with the same name.
  -p|path
        Print the path to the temporary directory of the
        current session.
  -r|restore session-name
        Restore the session named 'session-name' to a previous
        state. You can do it up to '\$S_NUMBER_OF_BACKUPS' times.
  -s|started
        List all currently running sessions.
  -v|version
        Print version.

Debug Options:
  debug function
        Executes the specified function or any command, after sourcing
        everything.
        WARNING: don't try ws-session debug rm -rf *
        EXAMPLE: ws-session debug s_list_app_seltag
  print [variable ...]
        Prints the content of the variables supplied.
        EXAMPLE: ws-session print S_LIB_HOME S_SEL_TAG"
}

s_copyright() {
echo "Copyright (C) 2010-2015 Ciril Troxler.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
 
Please report bugs at <http://github.com/ctx/ws-session/issues>."
}

s_print_system_actions() {
  typeset -F \
    | awk -F'_' '/s_system_action/{ 
          if (c!=1) {
            c=1;
            printf ("%s",$4);
          } else {
            printf (", %s",$4);
          }
        }'
}

S_LIB_HOME="${S_LIB_HOME:-/usr/lib/ws-session}"
if [[ -f "$S_LIB_HOME/core/source.sh" ]] ; then
  if ! source "$S_LIB_HOME/core/source.sh" ; then
    echo "FATAL: syntax error in source.sh, please report at
    <http://github.com/ctx/ws-session/issues>" >&2
    exit 127
  fi
else
  echo "FATAL: cannot find $S_LIB_HOME/core/source.sh, aborting!
       Install core files to /usr/lib/ws-session
       or export S_LIB_HOME, or in the directory with the code use:
       S_LIB_HOME=\$(pwd) bin/${0##*/}" >&2
  exit 127
fi

case $1 in
  -v|version)
      echo -n "${0##*/}, "
    if [[ -n "$VERSION" ]] ; then 
      echo "version ${VERSION}."
    else
      echo "run from git repository at commit $(git rev-list --count HEAD)."
    fi
    echo
    s_copyright
    ;;
  -l|list)
    s_source_lib data
    s_list_sessions | column
    ;;
  -p|path)
    s_source_lib wm stopwm
    echo "$S_TMP_DIR/$S_SEL_TAG/"
    ;;
  -m|menu)
    if which ${S_MENU%% *} 2>&3; then
      s_source_lib wm stopwm data

      name="$( (s_list_open_tags;s_list_sessions) \
        | grep -v ^$ \
        | sort -u \
        | eval "${S_MENU} ${S_MENU_PROMPT_SWITCH}'start a session:'")"

      if s_list_open_tags | grep -q -x -e "$name" ; then
        s_newtag "$name"
      elif [[ -n $name ]] ; then
          s_source_lib session allapp
          s_opensession "$name" & disown
      else
        s_error "No session selected" \
          "You stopped the menu without choosing a session"
      fi
    else
      s_error "Cannot find menu: '$S_MENU'" "Set it in your rc file" 
    fi
    ;;
  -o|open)
    shift
    s_source_lib wm stopwm
    if [[ $1 != "-f" ]] ; then
      name="$@"
      if s_list_open_tags | grep -q -x -e "$name" && [[ -n $name ]] ; then
        s_fatal "This session is already open" \
          "You cannot open a session twice"
      fi
    else
      shift
      name="$@"
    fi
    {
      s_source_lib data session allapp
      s_opensession "$name"
    } & disown
    ;;
  -c|close)
    shift
    name="$@"
    s_source_lib wm stopwm
    if [[ -n $name && $name != $S_SEL_TAG ]] ; then
      S_DEFAULT_TAG="$S_SEL_TAG"
    else
      name="$S_SEL_TAG"
    fi
    if s_list_open_tags | grep -q -x -e "$name" ; then
      s_source_lib data session allapp
      s_closesession "$name" & disown -a
    else
      s_error "No open session named '$name'" \
        "I can only close open sessions"
    fi
    ;;
  -n|new)
    shift
    name="$@"
    if [[ -n $name ]] ; then
      s_source_lib wm stopwm data session allapp
      s_newsession "$name"
    else
      s_fatal "Cannot save new session without a name"
    fi
    ;;
  -a|all)
    if  [[ -z $2 ]] ; then
      s_print_system_actions
      echo
      exit 0
    fi
    action="$2"
    s_source_lib wm stopwm data session allapp
    if ! type s_system_action_$action 2>&3 \
         | grep -q 'is a function' ; then
      s_fatal "No such action '$action'" \
        "Known actions are: $(s_print_system_actions)
       Change them in the rc file"
    fi
    {
      ( s_list_open_tags | sed -e "/$S_DEFAULT_TAG/d"
        echo $S_DEFAULT_TAG
      ) | while read -r name ; do
        s_closesession "$name"
      done
      sleep $S_RUN_ACTION_SLEEP
      s_system_action_$action
    } & disown
    ;;
  -r|restore)
    shift
    name="$@"
    s_source_lib data
    if s_list_sessions | grep -q -x -e "$name" ; then
      s_restore_data "$name"
    else
      s_error "no session with name '$name'" \
        "list your sessions with ws-session -l"
    fi
    ;;
  -s|started)
    s_source_lib wm stopwm
    s_list_open_tags
    ;;
  -h|help)
    s_help
    ;;
  debug)
    shift
    s_source_lib wm data session allapp
    $@
    ;;
  print)
    shift
    s_source_lib wm data session allapp
    for v in $@ ; do 
      eval echo "$v \;= \${$v[@]}"
    done | column -t -s";"
    ;;
  *)
    if [[ -z $1 ]] ; then
      s_error "Nothing to do" help
    else
      s_error "No such option: '$1'" help
    fi
    exit 127
    ;;
esac

# vim: ft=sh ts=2 et sw=2:
